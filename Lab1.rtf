{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 :- use_module(library(clpfd)).\
\
% Julian Tran - 014425370\
% CECS424 Section 03\
% 9/24/19\
% Lab 1\
\
/* \
% Representing a puzzle\
% *this goes into the query*\
Cages = [ \
	cage(mult, 120, [[0, 0], [0, 1], [1, 0], [2, 0]]),\
	cage(mult, 144, [[0, 2], [1, 2], [1, 3], [1, 4]]),\
	cage(id, 4, [0, 3]),\
	cage(add, 6, [[0, 4], [0, 5]]),\
	cage(div, 2, [[1, 1], [2, 1]]),\
	cage(div, 3, [[1, 5], [2, 5]]),\
	cage(sub, 3, [[2, 2], [3, 2]]),\
	cage(sub, 4, [[2, 3], [2, 4]]),\
	cage(mult, 15, [[3, 0], [3, 1]]),\
	cage(add, 16, [[3, 3], [3, 4], [4, 3], [5, 3]]),\
	cage(mult, 48, [[3, 5], [4, 4], [4, 5]]),\
	cage(sub, 3, [[4, 0], [5, 0]]),\
	cage(sub, 1, [[4, 1], [4, 2]]),\
	cage(sub, 5, [[5, 1], [5, 2]]),\
	cage(mult, 6, [[5, 4], [5, 5]])\
	],\
	solve(Cages, S).\
*/\
\
% Solving the puzzle:\
solve([ ], _).\
solve([H|T], S) :-\
    % 1-6 except 4 same as better soduku solver\
    \
    % "Need to make dimensions first before appending" (lab) - Terrell\
    \
    % You will force the size of S to be 6x6 using the length functor\
    % built in to Prolog, e.g., length(S, 6) forces S to have 6 rows.\
    \
  	% #1 S must have 6 rows  \
  	S = [A, B, C, D, E, F],\
    length(S, 6),\
    \
    % #2 Each row in S must be length 6\
    length(A, 6),\
    length(B, 6),\
    length(C, 6),\
    length(D, 6),\
    length(E, 6),\
    length(F, 6),\
    \
    % append/2 flattens the first argument into the second,\
	% giving a single list of all the squares in the puzzle.\
	% #3 Each row in S must only contain values from 1 to 6\
	append(S, Values),\
	Values ins 1..6,\
    \
    % #4 The entries in S must satisfy the cages of the puzzle.\
    check_cages([H|T], S),\
    \
	% maplist/2 corresponds to "all"; it is true if the given predicate function is true\
	% when applied to all elements of the given list.\
	% #5 Each row in S must contain all distinct values (no duplicates).\
	maplist(all_different, S),\
\
	% transpose/2 does a matrix transpose on the puzzle to give a list of\
	% columns instead of rows.\
	% #6 Each column in S must contain all distinct values.\
	transpose(S, Cols),\
	maplist(all_different, Cols),\
    \
    maplist(label, S).\
    \
% Validating cages:\
% To validate cages, we will write a functor\
% that enforces a single type of cage operator\
check_cages([ ], _).\
check_cages([H|T], S) :-\
    check_constraint(H, S),\
    check_cages(T, S).\
    \
% Different clauses of the check_cage functor that match \
% a single specific cage operator:\
% \
% check_constraint(cage(add, Value, Cells), S) will be true iff \
% the sum of the entries in the Cells sum to Value. \
check_constraint(cage(add, Value, [[X, Y]|T]), S) :-\
    cell_values([[X, Y]|T], S, Total),\
    sum_list(Total, Value).\
\
% check_constraint(cage(mult, Value, Cells), S) will be true iff \
% the sum of the entries in the Cells multiply to Value.\
check_constraint(cage(mult, Value, [[X, Y]|T]), S) :-\
    cell_values([[X, Y]|T], S, Total),\
    product_list(Total, Value).\
\
% check_constraint(cage(sub, Value, Cells), S) will be true iff \
% the the difference of the two entries in Cells is equal to Value. \
% Note that there will always be only two coordinates in Cells,\
% and that the order of the subtraction is not specified.\
check_constraint(cage(sub, Value, [[X1, Y1], [X2, Y2]]), S) :- %[X1,Y1] - first coordinate, [X2,Y2] - second coordinate\
    nth0(X1, S, Row1),\
    nth0(Y1, Row1, V1),\
    nth0(X2, S, Row2),\
    nth0(Y2, Row2, V2),\
    subtraction_list(V1, V2, Value).\
\
% check_constraint(cage(div, Value, Cells), S) will be true iff \
% the quotient of the two entries in Cells is equal to Value. \
% Use // for division, not /.\
check_constraint(cage(div, Value, [[X1, Y1], [X2, Y2]]), S) :- %[X1,Y1] - first coordinate, [X2,Y2] - second coordinate\
    nth0(X1, S, Row1),\
    nth0(Y1, Row1, V1),\
    nth0(X2, S, Row2),\
    nth0(Y2, Row2, V2),\
    division_list(V1, V2, Value).\
\
% check_constraint(cage(id, Value, Cells), S) will be true iff \
% the exact value of the single entry in Cells is equal to Value.\
check_constraint(cage(id, Value, [X, Y]), S) :-\
    nth0(X, S, Row),\
    nth0(Y, Row, Value).\
	\
% Coordinates vs. entries:\
% To translate a list of coordinates into a list of values at those\
% coordinates, you will write a functor cell_values(Cells, S, Values)\
cell_values([], _,[]).\
cell_values([[X, Y]|T], S, Values) :- \
    nth0(X, S, Row),\
    nth0(Y, Row, Value),\
    cell_values(T, S, Values2),\
    Values = [Value|Values2].\
\
% Sums and products:\
sum_list([], 0).\
sum_list([H|T], Sum) :- \
    sum_list(T, Sum2), \
    Sum #= H + Sum2.\
\
product_list([], 1).\
product_list([H|T], Product) :-\
    product_list(T, Product2),\
    Product #= H * Product2.\
         \
% You don't need functors for the quotient or difference of a list\
% of values, since division and subtraction always involves exactly two cells\
subtraction_list(0, 0, 0).\
subtraction_list(X, Y, Difference) :- % first value greater\
         X #> Y,\
         Difference #= X - Y.\
subtraction_list(X, Y, Difference) :- % second value greater\
         X #< Y,\
         Difference #= Y - X.\
subtraction_list(X, Y, Difference) :- % both values same (shouldn't happen in this puzzle anyways)\
         X #= Y,\
         Difference #= X - Y.         \
\
division_list(0, 0, 0).\
division_list(X, Y, Quotient) :- % first value greater\
         X #> Y,\
         Quotient #= X // Y.\
division_list(X, Y, Quotient) :- % second value greater\
         X #< Y,\
         Quotient #= Y // X.         \
division_list(X, Y, Quotient) :- % both values same (shouldn't happen in this puzzle anyways)\
         X #= Y,\
         Quotient #= X // Y.\
\
}